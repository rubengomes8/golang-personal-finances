// Code generated by gowrap. DO NOT EDIT.
// template: ../templates/log_template.go.tmpl
// gowrap: http://github.com/hexdigest/gowrap

package database

import (
	"context"
	"os"
	"time"

	"github.com/rs/zerolog"
	"github.com/rubengomes8/golang-personal-finances/internal/repository"
	"github.com/rubengomes8/golang-personal-finances/internal/repository/models"
)

// IncomeRepoWithLog implements repository.IncomeRepo that is instrumented with zerolog logger
type IncomeRepoWithLog struct {
	base repository.IncomeRepo
}

// DeleteIncome implements repository.IncomeRepo
func (d IncomeRepoWithLog) DeleteIncome(ctx context.Context, i1 int64) (err error) {

	nl := zerolog.Ctx(ctx)

	logger := nl.With().Fields(map[string]interface{}{
		"ctx": ctx,
		"i1":  i1}).Logger()

	defer func() {
		if err != nil {
			logger.Error().Fields(map[string]interface{}{
				"err": err}).Err(err).Str("decorator", "IncomeRepoWithLog").Str("method", "DeleteIncome").Msg("Error detected")
		} else {
			logger.Debug().Fields(map[string]interface{}{
				"err": err}).Str("decorator", "IncomeRepoWithLog").Str("method", "DeleteIncome").Msg("Finish")
		}
	}()
	return d.base.DeleteIncome(ctx, i1)
}

// GetIncomeByID implements repository.IncomeRepo
func (d IncomeRepoWithLog) GetIncomeByID(ctx context.Context, i1 int64) (i2 models.IncomeView, err error) {

	nl := zerolog.Ctx(ctx)

	logger := nl.With().Fields(map[string]interface{}{
		"ctx": ctx,
		"i1":  i1}).Logger()

	defer func() {
		if err != nil {
			logger.Error().Fields(map[string]interface{}{
				"i2":  i2,
				"err": err}).Err(err).Str("decorator", "IncomeRepoWithLog").Str("method", "GetIncomeByID").Msg("Error detected")
		} else {
			logger.Debug().Fields(map[string]interface{}{
				"i2":  i2,
				"err": err}).Str("decorator", "IncomeRepoWithLog").Str("method", "GetIncomeByID").Msg("Finish")
		}
	}()
	return d.base.GetIncomeByID(ctx, i1)
}

// GetIncomesByCard implements repository.IncomeRepo
func (d IncomeRepoWithLog) GetIncomesByCard(ctx context.Context, s1 string) (ia1 []models.IncomeView, err error) {

	nl := zerolog.Ctx(ctx)

	logger := nl.With().Fields(map[string]interface{}{
		"ctx": ctx,
		"s1":  s1}).Logger()

	defer func() {
		if err != nil {
			logger.Error().Fields(map[string]interface{}{
				"ia1": ia1,
				"err": err}).Err(err).Str("decorator", "IncomeRepoWithLog").Str("method", "GetIncomesByCard").Msg("Error detected")
		} else {
			logger.Debug().Fields(map[string]interface{}{
				"ia1": ia1,
				"err": err}).Str("decorator", "IncomeRepoWithLog").Str("method", "GetIncomesByCard").Msg("Finish")
		}
	}()
	return d.base.GetIncomesByCard(ctx, s1)
}

// GetIncomesByCategory implements repository.IncomeRepo
func (d IncomeRepoWithLog) GetIncomesByCategory(ctx context.Context, s1 string) (ia1 []models.IncomeView, err error) {

	nl := zerolog.Ctx(ctx)

	logger := nl.With().Fields(map[string]interface{}{
		"ctx": ctx,
		"s1":  s1}).Logger()

	defer func() {
		if err != nil {
			logger.Error().Fields(map[string]interface{}{
				"ia1": ia1,
				"err": err}).Err(err).Str("decorator", "IncomeRepoWithLog").Str("method", "GetIncomesByCategory").Msg("Error detected")
		} else {
			logger.Debug().Fields(map[string]interface{}{
				"ia1": ia1,
				"err": err}).Str("decorator", "IncomeRepoWithLog").Str("method", "GetIncomesByCategory").Msg("Finish")
		}
	}()
	return d.base.GetIncomesByCategory(ctx, s1)
}

// GetIncomesByDates implements repository.IncomeRepo
func (d IncomeRepoWithLog) GetIncomesByDates(ctx context.Context, t1 time.Time, t2 time.Time) (ia1 []models.IncomeView, err error) {

	nl := zerolog.Ctx(ctx)

	logger := nl.With().Fields(map[string]interface{}{
		"ctx": ctx,
		"t1":  t1,
		"t2":  t2}).Logger()

	defer func() {
		if err != nil {
			logger.Error().Fields(map[string]interface{}{
				"ia1": ia1,
				"err": err}).Err(err).Str("decorator", "IncomeRepoWithLog").Str("method", "GetIncomesByDates").Msg("Error detected")
		} else {
			logger.Debug().Fields(map[string]interface{}{
				"ia1": ia1,
				"err": err}).Str("decorator", "IncomeRepoWithLog").Str("method", "GetIncomesByDates").Msg("Finish")
		}
	}()
	return d.base.GetIncomesByDates(ctx, t1, t2)
}

// InsertIncome implements repository.IncomeRepo
func (d IncomeRepoWithLog) InsertIncome(ctx context.Context, i1 models.IncomeTable) (i2 int64, err error) {

	nl := zerolog.Ctx(ctx)

	logger := nl.With().Fields(map[string]interface{}{
		"ctx": ctx,
		"i1":  i1}).Logger()

	defer func() {
		if err != nil {
			logger.Error().Fields(map[string]interface{}{
				"i2":  i2,
				"err": err}).Err(err).Str("decorator", "IncomeRepoWithLog").Str("method", "InsertIncome").Msg("Error detected")
		} else {
			logger.Debug().Fields(map[string]interface{}{
				"i2":  i2,
				"err": err}).Str("decorator", "IncomeRepoWithLog").Str("method", "InsertIncome").Msg("Finish")
		}
	}()
	return d.base.InsertIncome(ctx, i1)
}

// UpdateIncome implements repository.IncomeRepo
func (d IncomeRepoWithLog) UpdateIncome(ctx context.Context, i1 models.IncomeTable) (i2 int64, err error) {

	nl := zerolog.Ctx(ctx)

	logger := nl.With().Fields(map[string]interface{}{
		"ctx": ctx,
		"i1":  i1}).Logger()

	defer func() {
		if err != nil {
			logger.Error().Fields(map[string]interface{}{
				"i2":  i2,
				"err": err}).Err(err).Str("decorator", "IncomeRepoWithLog").Str("method", "UpdateIncome").Msg("Error detected")
		} else {
			logger.Debug().Fields(map[string]interface{}{
				"i2":  i2,
				"err": err}).Str("decorator", "IncomeRepoWithLog").Str("method", "UpdateIncome").Msg("Finish")
		}
	}()
	return d.base.UpdateIncome(ctx, i1)
}

// NewIncomeRepoWithLog instruments an implementation of the repository.IncomeRepo with simple logging
func NewIncomeRepoWithLog(base repository.IncomeRepo) repository.IncomeRepo {
	decorate := os.Getenv("DECORATE")
	if decorate == "true" || decorate == "1" {
		return IncomeRepoWithLog{
			base: base,
		}
	}

	return base
}
