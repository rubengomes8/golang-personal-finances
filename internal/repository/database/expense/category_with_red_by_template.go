// Code generated by gowrap. DO NOT EDIT.
// template: ../../templates/red_template.go.tmpl
// gowrap: http://github.com/hexdigest/gowrap

package expense

import (
	"context"
	"fmt"
	"os"
	"strings"
	"time"

	"github.com/prometheus/client_golang/prometheus"
	"github.com/rubengomes8/golang-personal-finances/internal/instrumentation"
	"github.com/rubengomes8/golang-personal-finances/internal/repository"
	"github.com/rubengomes8/golang-personal-finances/internal/repository/models"
)

type ExpenseCategoryRepoWithRED struct {
	base         repository.ExpenseCategoryRepo
	histogramVec *prometheus.HistogramVec
}

// DeleteExpenseCategory implements repository.ExpenseCategoryRepo
func (d ExpenseCategoryRepoWithRED) DeleteExpenseCategory(ctx context.Context, i1 int64) (err error) {
	since := time.Now()
	defer func() {
		status := "ok"
		if err != nil {
			status = "error"
		}

		labels := prometheus.Labels{
			"status": status,
			"method": "DeleteExpenseCategory",
		}

		observer, err := d.histogramVec.GetMetricWith(labels)
		if err != nil {
			fmt.Printf("Metric: Error to get metric with labels %v\n", labels)
		}

		observer.Observe(float64(time.Since(since).Milliseconds()))
	}()
	return d.base.DeleteExpenseCategory(ctx, i1)
}

// GetExpenseCategoryByID implements repository.ExpenseCategoryRepo
func (d ExpenseCategoryRepoWithRED) GetExpenseCategoryByID(ctx context.Context, i1 int64) (e1 models.ExpenseCategoryTable, err error) {
	since := time.Now()
	defer func() {
		status := "ok"
		if err != nil {
			status = "error"
		}

		labels := prometheus.Labels{
			"status": status,
			"method": "GetExpenseCategoryByID",
		}

		observer, err := d.histogramVec.GetMetricWith(labels)
		if err != nil {
			fmt.Printf("Metric: Error to get metric with labels %v\n", labels)
		}

		observer.Observe(float64(time.Since(since).Milliseconds()))
	}()
	return d.base.GetExpenseCategoryByID(ctx, i1)
}

// GetExpenseCategoryByName implements repository.ExpenseCategoryRepo
func (d ExpenseCategoryRepoWithRED) GetExpenseCategoryByName(ctx context.Context, s1 string) (e1 models.ExpenseCategoryTable, err error) {
	since := time.Now()
	defer func() {
		status := "ok"
		if err != nil {
			status = "error"
		}

		labels := prometheus.Labels{
			"status": status,
			"method": "GetExpenseCategoryByName",
		}

		observer, err := d.histogramVec.GetMetricWith(labels)
		if err != nil {
			fmt.Printf("Metric: Error to get metric with labels %v\n", labels)
		}

		observer.Observe(float64(time.Since(since).Milliseconds()))
	}()
	return d.base.GetExpenseCategoryByName(ctx, s1)
}

// InsertExpenseCategory implements repository.ExpenseCategoryRepo
func (d ExpenseCategoryRepoWithRED) InsertExpenseCategory(ctx context.Context, e1 models.ExpenseCategoryTable) (i1 int64, err error) {
	since := time.Now()
	defer func() {
		status := "ok"
		if err != nil {
			status = "error"
		}

		labels := prometheus.Labels{
			"status": status,
			"method": "InsertExpenseCategory",
		}

		observer, err := d.histogramVec.GetMetricWith(labels)
		if err != nil {
			fmt.Printf("Metric: Error to get metric with labels %v\n", labels)
		}

		observer.Observe(float64(time.Since(since).Milliseconds()))
	}()
	return d.base.InsertExpenseCategory(ctx, e1)
}

// UpdateExpenseCategory implements repository.ExpenseCategoryRepo
func (d ExpenseCategoryRepoWithRED) UpdateExpenseCategory(ctx context.Context, e1 models.ExpenseCategoryTable) (i1 int64, err error) {
	since := time.Now()
	defer func() {
		status := "ok"
		if err != nil {
			status = "error"
		}

		labels := prometheus.Labels{
			"status": status,
			"method": "UpdateExpenseCategory",
		}

		observer, err := d.histogramVec.GetMetricWith(labels)
		if err != nil {
			fmt.Printf("Metric: Error to get metric with labels %v\n", labels)
		}

		observer.Observe(float64(time.Since(since).Milliseconds()))
	}()
	return d.base.UpdateExpenseCategory(ctx, e1)
}

// NewExpenseCategoryRepoWithRED returns an instance of the repository.ExpenseCategoryRepo decorated with red histogram metric
func NewExpenseCategoryRepoWithRED(base repository.ExpenseCategoryRepo, constLabels prometheus.Labels) (decorator repository.ExpenseCategoryRepo, err error) {
	decorate := os.Getenv("DECORATE")
	if !(decorate == "true" || decorate == "1") {
		return base, nil
	}

	subSystem := "expense_category_repo"

	metricConfig := prometheus.HistogramOpts{
		Namespace:   strings.TrimSpace("system"),
		Subsystem:   subSystem,
		Name:        fmt.Sprintf("%s_red", subSystem),
		Help:        "ExpenseCategoryRepo RED histogram (rate, errors and duration).",
		ConstLabels: constLabels,
		Buckets:     prometheus.ExponentialBuckets(100, 2, 5),
	}

	red := ExpenseCategoryRepoWithRED{
		base:         base,
		histogramVec: prometheus.NewHistogramVec(metricConfig, []string{"status", "method"}),
	}

	err = instrumentation.Registry.Register(red.histogramVec)
	if err != nil {
		return nil, err
	}

	return red, nil
}
