// Code generated by gowrap. DO NOT EDIT.
// template: ../../templates/log_template.go.tmpl
// gowrap: http://github.com/hexdigest/gowrap

package expense

import (
	"context"
	"os"

	"github.com/rs/zerolog"
	"github.com/rubengomes8/golang-personal-finances/internal/repository"
	"github.com/rubengomes8/golang-personal-finances/internal/repository/models"
)

// ExpenseSubCategoryRepoWithLogs implements repository.ExpenseSubCategoryRepo that is instrumented with zerolog logger
type ExpenseSubCategoryRepoWithLogs struct {
	base repository.ExpenseSubCategoryRepo
}

// DeleteExpenseSubCategory implements repository.ExpenseSubCategoryRepo
func (d ExpenseSubCategoryRepoWithLogs) DeleteExpenseSubCategory(ctx context.Context, i1 int64) (err error) {

	nl := zerolog.Ctx(ctx)

	logger := nl.With().Fields(map[string]interface{}{
		"ctx": ctx,
		"i1":  i1}).Logger()

	defer func() {
		if err != nil {
			logger.Error().Fields(map[string]interface{}{
				"err": err}).Err(err).Str("decorator", "ExpenseSubCategoryRepoWithLogs").Str("method", "DeleteExpenseSubCategory").Msg("Error detected")
		} else {
			logger.Debug().Fields(map[string]interface{}{
				"err": err}).Str("decorator", "ExpenseSubCategoryRepoWithLogs").Str("method", "DeleteExpenseSubCategory").Msg("Finish")
		}
	}()
	return d.base.DeleteExpenseSubCategory(ctx, i1)
}

// GetExpenseSubCategoryByID implements repository.ExpenseSubCategoryRepo
func (d ExpenseSubCategoryRepoWithLogs) GetExpenseSubCategoryByID(ctx context.Context, i1 int64) (e1 models.ExpenseSubCategoryTable, err error) {

	nl := zerolog.Ctx(ctx)

	logger := nl.With().Fields(map[string]interface{}{
		"ctx": ctx,
		"i1":  i1}).Logger()

	defer func() {
		if err != nil {
			logger.Error().Fields(map[string]interface{}{
				"e1":  e1,
				"err": err}).Err(err).Str("decorator", "ExpenseSubCategoryRepoWithLogs").Str("method", "GetExpenseSubCategoryByID").Msg("Error detected")
		} else {
			logger.Debug().Fields(map[string]interface{}{
				"e1":  e1,
				"err": err}).Str("decorator", "ExpenseSubCategoryRepoWithLogs").Str("method", "GetExpenseSubCategoryByID").Msg("Finish")
		}
	}()
	return d.base.GetExpenseSubCategoryByID(ctx, i1)
}

// GetExpenseSubCategoryByName implements repository.ExpenseSubCategoryRepo
func (d ExpenseSubCategoryRepoWithLogs) GetExpenseSubCategoryByName(ctx context.Context, s1 string) (e1 models.ExpenseSubCategoryTable, err error) {

	nl := zerolog.Ctx(ctx)

	logger := nl.With().Fields(map[string]interface{}{
		"ctx": ctx,
		"s1":  s1}).Logger()

	defer func() {
		if err != nil {
			logger.Error().Fields(map[string]interface{}{
				"e1":  e1,
				"err": err}).Err(err).Str("decorator", "ExpenseSubCategoryRepoWithLogs").Str("method", "GetExpenseSubCategoryByName").Msg("Error detected")
		} else {
			logger.Debug().Fields(map[string]interface{}{
				"e1":  e1,
				"err": err}).Str("decorator", "ExpenseSubCategoryRepoWithLogs").Str("method", "GetExpenseSubCategoryByName").Msg("Finish")
		}
	}()
	return d.base.GetExpenseSubCategoryByName(ctx, s1)
}

// InsertExpenseSubCategory implements repository.ExpenseSubCategoryRepo
func (d ExpenseSubCategoryRepoWithLogs) InsertExpenseSubCategory(ctx context.Context, e1 models.ExpenseSubCategoryTable) (i1 int64, err error) {

	nl := zerolog.Ctx(ctx)

	logger := nl.With().Fields(map[string]interface{}{
		"ctx": ctx,
		"e1":  e1}).Logger()

	defer func() {
		if err != nil {
			logger.Error().Fields(map[string]interface{}{
				"i1":  i1,
				"err": err}).Err(err).Str("decorator", "ExpenseSubCategoryRepoWithLogs").Str("method", "InsertExpenseSubCategory").Msg("Error detected")
		} else {
			logger.Debug().Fields(map[string]interface{}{
				"i1":  i1,
				"err": err}).Str("decorator", "ExpenseSubCategoryRepoWithLogs").Str("method", "InsertExpenseSubCategory").Msg("Finish")
		}
	}()
	return d.base.InsertExpenseSubCategory(ctx, e1)
}

// UpdateExpenseSubCategory implements repository.ExpenseSubCategoryRepo
func (d ExpenseSubCategoryRepoWithLogs) UpdateExpenseSubCategory(ctx context.Context, e1 models.ExpenseSubCategoryTable) (i1 int64, err error) {

	nl := zerolog.Ctx(ctx)

	logger := nl.With().Fields(map[string]interface{}{
		"ctx": ctx,
		"e1":  e1}).Logger()

	defer func() {
		if err != nil {
			logger.Error().Fields(map[string]interface{}{
				"i1":  i1,
				"err": err}).Err(err).Str("decorator", "ExpenseSubCategoryRepoWithLogs").Str("method", "UpdateExpenseSubCategory").Msg("Error detected")
		} else {
			logger.Debug().Fields(map[string]interface{}{
				"i1":  i1,
				"err": err}).Str("decorator", "ExpenseSubCategoryRepoWithLogs").Str("method", "UpdateExpenseSubCategory").Msg("Finish")
		}
	}()
	return d.base.UpdateExpenseSubCategory(ctx, e1)
}

// NewExpenseSubCategoryRepoWithLogs instruments an implementation of the repository.ExpenseSubCategoryRepo with simple logging
func NewExpenseSubCategoryRepoWithLogs(base repository.ExpenseSubCategoryRepo) repository.ExpenseSubCategoryRepo {
	decorate := os.Getenv("DECORATE")
	if decorate == "true" || decorate == "1" {
		return ExpenseSubCategoryRepoWithLogs{
			base: base,
		}
	}

	return base
}
