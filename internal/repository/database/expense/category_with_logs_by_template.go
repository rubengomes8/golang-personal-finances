// Code generated by gowrap. DO NOT EDIT.
// template: ../../templates/log_template.go.tmpl
// gowrap: http://github.com/hexdigest/gowrap

package expense

import (
	"context"
	"os"

	"github.com/rs/zerolog"
	"github.com/rubengomes8/golang-personal-finances/internal/repository"
	"github.com/rubengomes8/golang-personal-finances/internal/repository/models"
)

// ExpenseCategoryRepoWithLogs implements repository.ExpenseCategoryRepo that is instrumented with zerolog logger
type ExpenseCategoryRepoWithLogs struct {
	base repository.ExpenseCategoryRepo
}

// DeleteExpenseCategory implements repository.ExpenseCategoryRepo
func (d ExpenseCategoryRepoWithLogs) DeleteExpenseCategory(ctx context.Context, i1 int64) (err error) {

	nl := zerolog.Ctx(ctx)

	logger := nl.With().Fields(map[string]interface{}{
		"ctx": ctx,
		"i1":  i1}).Logger()

	defer func() {
		if err != nil {
			logger.Error().Fields(map[string]interface{}{
				"err": err}).Err(err).Str("decorator", "ExpenseCategoryRepoWithLogs").Str("method", "DeleteExpenseCategory").Msg("Error detected")
		} else {
			logger.Debug().Fields(map[string]interface{}{
				"err": err}).Str("decorator", "ExpenseCategoryRepoWithLogs").Str("method", "DeleteExpenseCategory").Msg("Finish")
		}
	}()
	return d.base.DeleteExpenseCategory(ctx, i1)
}

// GetExpenseCategoryByID implements repository.ExpenseCategoryRepo
func (d ExpenseCategoryRepoWithLogs) GetExpenseCategoryByID(ctx context.Context, i1 int64) (e1 models.ExpenseCategoryTable, err error) {

	nl := zerolog.Ctx(ctx)

	logger := nl.With().Fields(map[string]interface{}{
		"ctx": ctx,
		"i1":  i1}).Logger()

	defer func() {
		if err != nil {
			logger.Error().Fields(map[string]interface{}{
				"e1":  e1,
				"err": err}).Err(err).Str("decorator", "ExpenseCategoryRepoWithLogs").Str("method", "GetExpenseCategoryByID").Msg("Error detected")
		} else {
			logger.Debug().Fields(map[string]interface{}{
				"e1":  e1,
				"err": err}).Str("decorator", "ExpenseCategoryRepoWithLogs").Str("method", "GetExpenseCategoryByID").Msg("Finish")
		}
	}()
	return d.base.GetExpenseCategoryByID(ctx, i1)
}

// GetExpenseCategoryByName implements repository.ExpenseCategoryRepo
func (d ExpenseCategoryRepoWithLogs) GetExpenseCategoryByName(ctx context.Context, s1 string) (e1 models.ExpenseCategoryTable, err error) {

	nl := zerolog.Ctx(ctx)

	logger := nl.With().Fields(map[string]interface{}{
		"ctx": ctx,
		"s1":  s1}).Logger()

	defer func() {
		if err != nil {
			logger.Error().Fields(map[string]interface{}{
				"e1":  e1,
				"err": err}).Err(err).Str("decorator", "ExpenseCategoryRepoWithLogs").Str("method", "GetExpenseCategoryByName").Msg("Error detected")
		} else {
			logger.Debug().Fields(map[string]interface{}{
				"e1":  e1,
				"err": err}).Str("decorator", "ExpenseCategoryRepoWithLogs").Str("method", "GetExpenseCategoryByName").Msg("Finish")
		}
	}()
	return d.base.GetExpenseCategoryByName(ctx, s1)
}

// InsertExpenseCategory implements repository.ExpenseCategoryRepo
func (d ExpenseCategoryRepoWithLogs) InsertExpenseCategory(ctx context.Context, e1 models.ExpenseCategoryTable) (i1 int64, err error) {

	nl := zerolog.Ctx(ctx)

	logger := nl.With().Fields(map[string]interface{}{
		"ctx": ctx,
		"e1":  e1}).Logger()

	defer func() {
		if err != nil {
			logger.Error().Fields(map[string]interface{}{
				"i1":  i1,
				"err": err}).Err(err).Str("decorator", "ExpenseCategoryRepoWithLogs").Str("method", "InsertExpenseCategory").Msg("Error detected")
		} else {
			logger.Debug().Fields(map[string]interface{}{
				"i1":  i1,
				"err": err}).Str("decorator", "ExpenseCategoryRepoWithLogs").Str("method", "InsertExpenseCategory").Msg("Finish")
		}
	}()
	return d.base.InsertExpenseCategory(ctx, e1)
}

// UpdateExpenseCategory implements repository.ExpenseCategoryRepo
func (d ExpenseCategoryRepoWithLogs) UpdateExpenseCategory(ctx context.Context, e1 models.ExpenseCategoryTable) (i1 int64, err error) {

	nl := zerolog.Ctx(ctx)

	logger := nl.With().Fields(map[string]interface{}{
		"ctx": ctx,
		"e1":  e1}).Logger()

	defer func() {
		if err != nil {
			logger.Error().Fields(map[string]interface{}{
				"i1":  i1,
				"err": err}).Err(err).Str("decorator", "ExpenseCategoryRepoWithLogs").Str("method", "UpdateExpenseCategory").Msg("Error detected")
		} else {
			logger.Debug().Fields(map[string]interface{}{
				"i1":  i1,
				"err": err}).Str("decorator", "ExpenseCategoryRepoWithLogs").Str("method", "UpdateExpenseCategory").Msg("Finish")
		}
	}()
	return d.base.UpdateExpenseCategory(ctx, e1)
}

// NewExpenseCategoryRepoWithLogs instruments an implementation of the repository.ExpenseCategoryRepo with simple logging
func NewExpenseCategoryRepoWithLogs(base repository.ExpenseCategoryRepo) repository.ExpenseCategoryRepo {
	decorate := os.Getenv("DECORATE")
	if decorate == "true" || decorate == "1" {
		return ExpenseCategoryRepoWithLogs{
			base: base,
		}
	}

	return base
}
