// Code generated by gowrap. DO NOT EDIT.
// template: ../../templates/log_template.go.tmpl
// gowrap: http://github.com/hexdigest/gowrap

package expense

import (
	"context"
	"os"
	"time"

	"github.com/rs/zerolog"
	"github.com/rubengomes8/golang-personal-finances/internal/repository"
	"github.com/rubengomes8/golang-personal-finances/internal/repository/models"
)

// ExpenseRepoWithLogs implements repository.ExpenseRepo that is instrumented with zerolog logger
type ExpenseRepoWithLogs struct {
	base repository.ExpenseRepo
}

// DeleteExpense implements repository.ExpenseRepo
func (d ExpenseRepoWithLogs) DeleteExpense(ctx context.Context, i1 int64) (err error) {

	nl := zerolog.Ctx(ctx)

	logger := nl.With().Fields(map[string]interface{}{
		"ctx": ctx,
		"i1":  i1}).Logger()

	defer func() {
		if err != nil {
			logger.Error().Fields(map[string]interface{}{
				"err": err}).Err(err).Str("decorator", "ExpenseRepoWithLogs").Str("method", "DeleteExpense").Msg("Error detected")
		} else {
			logger.Debug().Fields(map[string]interface{}{
				"err": err}).Str("decorator", "ExpenseRepoWithLogs").Str("method", "DeleteExpense").Msg("Finish")
		}
	}()
	return d.base.DeleteExpense(ctx, i1)
}

// GetExpenseByID implements repository.ExpenseRepo
func (d ExpenseRepoWithLogs) GetExpenseByID(ctx context.Context, i1 int64) (e1 models.ExpenseView, err error) {

	nl := zerolog.Ctx(ctx)

	logger := nl.With().Fields(map[string]interface{}{
		"ctx": ctx,
		"i1":  i1}).Logger()

	defer func() {
		if err != nil {
			logger.Error().Fields(map[string]interface{}{
				"e1":  e1,
				"err": err}).Err(err).Str("decorator", "ExpenseRepoWithLogs").Str("method", "GetExpenseByID").Msg("Error detected")
		} else {
			logger.Debug().Fields(map[string]interface{}{
				"e1":  e1,
				"err": err}).Str("decorator", "ExpenseRepoWithLogs").Str("method", "GetExpenseByID").Msg("Finish")
		}
	}()
	return d.base.GetExpenseByID(ctx, i1)
}

// GetExpensesByCard implements repository.ExpenseRepo
func (d ExpenseRepoWithLogs) GetExpensesByCard(ctx context.Context, s1 string) (ea1 []models.ExpenseView, err error) {

	nl := zerolog.Ctx(ctx)

	logger := nl.With().Fields(map[string]interface{}{
		"ctx": ctx,
		"s1":  s1}).Logger()

	defer func() {
		if err != nil {
			logger.Error().Fields(map[string]interface{}{
				"ea1": ea1,
				"err": err}).Err(err).Str("decorator", "ExpenseRepoWithLogs").Str("method", "GetExpensesByCard").Msg("Error detected")
		} else {
			logger.Debug().Fields(map[string]interface{}{
				"ea1": ea1,
				"err": err}).Str("decorator", "ExpenseRepoWithLogs").Str("method", "GetExpensesByCard").Msg("Finish")
		}
	}()
	return d.base.GetExpensesByCard(ctx, s1)
}

// GetExpensesByCategory implements repository.ExpenseRepo
func (d ExpenseRepoWithLogs) GetExpensesByCategory(ctx context.Context, s1 string) (ea1 []models.ExpenseView, err error) {

	nl := zerolog.Ctx(ctx)

	logger := nl.With().Fields(map[string]interface{}{
		"ctx": ctx,
		"s1":  s1}).Logger()

	defer func() {
		if err != nil {
			logger.Error().Fields(map[string]interface{}{
				"ea1": ea1,
				"err": err}).Err(err).Str("decorator", "ExpenseRepoWithLogs").Str("method", "GetExpensesByCategory").Msg("Error detected")
		} else {
			logger.Debug().Fields(map[string]interface{}{
				"ea1": ea1,
				"err": err}).Str("decorator", "ExpenseRepoWithLogs").Str("method", "GetExpensesByCategory").Msg("Finish")
		}
	}()
	return d.base.GetExpensesByCategory(ctx, s1)
}

// GetExpensesByDates implements repository.ExpenseRepo
func (d ExpenseRepoWithLogs) GetExpensesByDates(ctx context.Context, t1 time.Time, t2 time.Time) (ea1 []models.ExpenseView, err error) {

	nl := zerolog.Ctx(ctx)

	logger := nl.With().Fields(map[string]interface{}{
		"ctx": ctx,
		"t1":  t1,
		"t2":  t2}).Logger()

	defer func() {
		if err != nil {
			logger.Error().Fields(map[string]interface{}{
				"ea1": ea1,
				"err": err}).Err(err).Str("decorator", "ExpenseRepoWithLogs").Str("method", "GetExpensesByDates").Msg("Error detected")
		} else {
			logger.Debug().Fields(map[string]interface{}{
				"ea1": ea1,
				"err": err}).Str("decorator", "ExpenseRepoWithLogs").Str("method", "GetExpensesByDates").Msg("Finish")
		}
	}()
	return d.base.GetExpensesByDates(ctx, t1, t2)
}

// GetExpensesBySubCategory implements repository.ExpenseRepo
func (d ExpenseRepoWithLogs) GetExpensesBySubCategory(ctx context.Context, s1 string) (ea1 []models.ExpenseView, err error) {

	nl := zerolog.Ctx(ctx)

	logger := nl.With().Fields(map[string]interface{}{
		"ctx": ctx,
		"s1":  s1}).Logger()

	defer func() {
		if err != nil {
			logger.Error().Fields(map[string]interface{}{
				"ea1": ea1,
				"err": err}).Err(err).Str("decorator", "ExpenseRepoWithLogs").Str("method", "GetExpensesBySubCategory").Msg("Error detected")
		} else {
			logger.Debug().Fields(map[string]interface{}{
				"ea1": ea1,
				"err": err}).Str("decorator", "ExpenseRepoWithLogs").Str("method", "GetExpensesBySubCategory").Msg("Finish")
		}
	}()
	return d.base.GetExpensesBySubCategory(ctx, s1)
}

// InsertExpense implements repository.ExpenseRepo
func (d ExpenseRepoWithLogs) InsertExpense(ctx context.Context, e1 models.ExpenseTable) (i1 int64, err error) {

	nl := zerolog.Ctx(ctx)

	logger := nl.With().Fields(map[string]interface{}{
		"ctx": ctx,
		"e1":  e1}).Logger()

	defer func() {
		if err != nil {
			logger.Error().Fields(map[string]interface{}{
				"i1":  i1,
				"err": err}).Err(err).Str("decorator", "ExpenseRepoWithLogs").Str("method", "InsertExpense").Msg("Error detected")
		} else {
			logger.Debug().Fields(map[string]interface{}{
				"i1":  i1,
				"err": err}).Str("decorator", "ExpenseRepoWithLogs").Str("method", "InsertExpense").Msg("Finish")
		}
	}()
	return d.base.InsertExpense(ctx, e1)
}

// UpdateExpense implements repository.ExpenseRepo
func (d ExpenseRepoWithLogs) UpdateExpense(ctx context.Context, e1 models.ExpenseTable) (i1 int64, err error) {

	nl := zerolog.Ctx(ctx)

	logger := nl.With().Fields(map[string]interface{}{
		"ctx": ctx,
		"e1":  e1}).Logger()

	defer func() {
		if err != nil {
			logger.Error().Fields(map[string]interface{}{
				"i1":  i1,
				"err": err}).Err(err).Str("decorator", "ExpenseRepoWithLogs").Str("method", "UpdateExpense").Msg("Error detected")
		} else {
			logger.Debug().Fields(map[string]interface{}{
				"i1":  i1,
				"err": err}).Str("decorator", "ExpenseRepoWithLogs").Str("method", "UpdateExpense").Msg("Finish")
		}
	}()
	return d.base.UpdateExpense(ctx, e1)
}

// NewExpenseRepoWithLogs instruments an implementation of the repository.ExpenseRepo with simple logging
func NewExpenseRepoWithLogs(base repository.ExpenseRepo) repository.ExpenseRepo {
	decorate := os.Getenv("DECORATE")
	if decorate == "true" || decorate == "1" {
		return ExpenseRepoWithLogs{
			base: base,
		}
	}

	return base
}
