// Code generated by gowrap. DO NOT EDIT.
// template: ../../templates/red_template.go.tmpl
// gowrap: http://github.com/hexdigest/gowrap

package income

import (
	"context"
	"fmt"
	"os"
	"strings"
	"time"

	"github.com/prometheus/client_golang/prometheus"
	"github.com/rubengomes8/golang-personal-finances/internal/instrumentation"
	"github.com/rubengomes8/golang-personal-finances/internal/repository"
	"github.com/rubengomes8/golang-personal-finances/internal/repository/models"
)

type IncomeCategoryRepoWithRED struct {
	base         repository.IncomeCategoryRepo
	histogramVec *prometheus.HistogramVec
}

// DeleteIncomeCategory implements repository.IncomeCategoryRepo
func (d IncomeCategoryRepoWithRED) DeleteIncomeCategory(ctx context.Context, i1 int64) (err error) {
	since := time.Now()
	defer func() {
		status := "ok"
		if err != nil {
			status = "error"
		}

		labels := prometheus.Labels{
			"status": status,
			"method": "DeleteIncomeCategory",
		}

		observer, err := d.histogramVec.GetMetricWith(labels)
		if err != nil {
			fmt.Printf("Metric: Error to get metric with labels %v\n", labels)
		}

		observer.Observe(float64(time.Since(since).Milliseconds()))
	}()
	return d.base.DeleteIncomeCategory(ctx, i1)
}

// GetIncomeCategoryByID implements repository.IncomeCategoryRepo
func (d IncomeCategoryRepoWithRED) GetIncomeCategoryByID(ctx context.Context, i1 int64) (i2 models.IncomeCategoryTable, err error) {
	since := time.Now()
	defer func() {
		status := "ok"
		if err != nil {
			status = "error"
		}

		labels := prometheus.Labels{
			"status": status,
			"method": "GetIncomeCategoryByID",
		}

		observer, err := d.histogramVec.GetMetricWith(labels)
		if err != nil {
			fmt.Printf("Metric: Error to get metric with labels %v\n", labels)
		}

		observer.Observe(float64(time.Since(since).Milliseconds()))
	}()
	return d.base.GetIncomeCategoryByID(ctx, i1)
}

// GetIncomeCategoryByName implements repository.IncomeCategoryRepo
func (d IncomeCategoryRepoWithRED) GetIncomeCategoryByName(ctx context.Context, s1 string) (i1 models.IncomeCategoryTable, err error) {
	since := time.Now()
	defer func() {
		status := "ok"
		if err != nil {
			status = "error"
		}

		labels := prometheus.Labels{
			"status": status,
			"method": "GetIncomeCategoryByName",
		}

		observer, err := d.histogramVec.GetMetricWith(labels)
		if err != nil {
			fmt.Printf("Metric: Error to get metric with labels %v\n", labels)
		}

		observer.Observe(float64(time.Since(since).Milliseconds()))
	}()
	return d.base.GetIncomeCategoryByName(ctx, s1)
}

// InsertIncomeCategory implements repository.IncomeCategoryRepo
func (d IncomeCategoryRepoWithRED) InsertIncomeCategory(ctx context.Context, i1 models.IncomeCategoryTable) (i2 int64, err error) {
	since := time.Now()
	defer func() {
		status := "ok"
		if err != nil {
			status = "error"
		}

		labels := prometheus.Labels{
			"status": status,
			"method": "InsertIncomeCategory",
		}

		observer, err := d.histogramVec.GetMetricWith(labels)
		if err != nil {
			fmt.Printf("Metric: Error to get metric with labels %v\n", labels)
		}

		observer.Observe(float64(time.Since(since).Milliseconds()))
	}()
	return d.base.InsertIncomeCategory(ctx, i1)
}

// UpdateIncomeCategory implements repository.IncomeCategoryRepo
func (d IncomeCategoryRepoWithRED) UpdateIncomeCategory(ctx context.Context, i1 models.IncomeCategoryTable) (i2 int64, err error) {
	since := time.Now()
	defer func() {
		status := "ok"
		if err != nil {
			status = "error"
		}

		labels := prometheus.Labels{
			"status": status,
			"method": "UpdateIncomeCategory",
		}

		observer, err := d.histogramVec.GetMetricWith(labels)
		if err != nil {
			fmt.Printf("Metric: Error to get metric with labels %v\n", labels)
		}

		observer.Observe(float64(time.Since(since).Milliseconds()))
	}()
	return d.base.UpdateIncomeCategory(ctx, i1)
}

// NewIncomeCategoryRepoWithRED returns an instance of the repository.IncomeCategoryRepo decorated with red histogram metric
func NewIncomeCategoryRepoWithRED(base repository.IncomeCategoryRepo, constLabels prometheus.Labels) (decorator repository.IncomeCategoryRepo, err error) {
	decorate := os.Getenv("DECORATE")
	if !(decorate == "true" || decorate == "1") {
		return base, nil
	}

	subSystem := "income_category_repo"

	metricConfig := prometheus.HistogramOpts{
		Namespace:   strings.TrimSpace("system"),
		Subsystem:   subSystem,
		Name:        fmt.Sprintf("%s_red", subSystem),
		Help:        "IncomeCategoryRepo RED histogram (rate, errors and duration).",
		ConstLabels: constLabels,
		Buckets:     prometheus.ExponentialBuckets(100, 2, 5),
	}

	red := IncomeCategoryRepoWithRED{
		base:         base,
		histogramVec: prometheus.NewHistogramVec(metricConfig, []string{"status", "method"}),
	}

	err = instrumentation.Registry.Register(red.histogramVec)
	if err != nil {
		return nil, err
	}

	return red, nil
}
