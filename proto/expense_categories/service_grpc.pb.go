// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/expense_categories/service.proto

package expense_categories

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExpenseCategoryServiceClient is the client API for ExpenseCategoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExpenseCategoryServiceClient interface {
	CreateExpenseCategory(ctx context.Context, in *ExpenseCategoryCreateRequest, opts ...grpc.CallOption) (*ExpenseCategoryCreateResponse, error)
	GetExpenseCategoryByName(ctx context.Context, in *ExpenseCategoryGetRequestByName, opts ...grpc.CallOption) (*ExpenseCategoryGetResponse, error)
}

type expenseCategoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExpenseCategoryServiceClient(cc grpc.ClientConnInterface) ExpenseCategoryServiceClient {
	return &expenseCategoryServiceClient{cc}
}

func (c *expenseCategoryServiceClient) CreateExpenseCategory(ctx context.Context, in *ExpenseCategoryCreateRequest, opts ...grpc.CallOption) (*ExpenseCategoryCreateResponse, error) {
	out := new(ExpenseCategoryCreateResponse)
	err := c.cc.Invoke(ctx, "/expense_categories.ExpenseCategoryService/CreateExpenseCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expenseCategoryServiceClient) GetExpenseCategoryByName(ctx context.Context, in *ExpenseCategoryGetRequestByName, opts ...grpc.CallOption) (*ExpenseCategoryGetResponse, error) {
	out := new(ExpenseCategoryGetResponse)
	err := c.cc.Invoke(ctx, "/expense_categories.ExpenseCategoryService/GetExpenseCategoryByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExpenseCategoryServiceServer is the server API for ExpenseCategoryService service.
// All implementations must embed UnimplementedExpenseCategoryServiceServer
// for forward compatibility
type ExpenseCategoryServiceServer interface {
	CreateExpenseCategory(context.Context, *ExpenseCategoryCreateRequest) (*ExpenseCategoryCreateResponse, error)
	GetExpenseCategoryByName(context.Context, *ExpenseCategoryGetRequestByName) (*ExpenseCategoryGetResponse, error)
	mustEmbedUnimplementedExpenseCategoryServiceServer()
}

// UnimplementedExpenseCategoryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExpenseCategoryServiceServer struct {
}

func (UnimplementedExpenseCategoryServiceServer) CreateExpenseCategory(context.Context, *ExpenseCategoryCreateRequest) (*ExpenseCategoryCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExpenseCategory not implemented")
}
func (UnimplementedExpenseCategoryServiceServer) GetExpenseCategoryByName(context.Context, *ExpenseCategoryGetRequestByName) (*ExpenseCategoryGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExpenseCategoryByName not implemented")
}
func (UnimplementedExpenseCategoryServiceServer) mustEmbedUnimplementedExpenseCategoryServiceServer() {
}

// UnsafeExpenseCategoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExpenseCategoryServiceServer will
// result in compilation errors.
type UnsafeExpenseCategoryServiceServer interface {
	mustEmbedUnimplementedExpenseCategoryServiceServer()
}

func RegisterExpenseCategoryServiceServer(s grpc.ServiceRegistrar, srv ExpenseCategoryServiceServer) {
	s.RegisterService(&ExpenseCategoryService_ServiceDesc, srv)
}

func _ExpenseCategoryService_CreateExpenseCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpenseCategoryCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpenseCategoryServiceServer).CreateExpenseCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/expense_categories.ExpenseCategoryService/CreateExpenseCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpenseCategoryServiceServer).CreateExpenseCategory(ctx, req.(*ExpenseCategoryCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExpenseCategoryService_GetExpenseCategoryByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpenseCategoryGetRequestByName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpenseCategoryServiceServer).GetExpenseCategoryByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/expense_categories.ExpenseCategoryService/GetExpenseCategoryByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpenseCategoryServiceServer).GetExpenseCategoryByName(ctx, req.(*ExpenseCategoryGetRequestByName))
	}
	return interceptor(ctx, in, info, handler)
}

// ExpenseCategoryService_ServiceDesc is the grpc.ServiceDesc for ExpenseCategoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExpenseCategoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "expense_categories.ExpenseCategoryService",
	HandlerType: (*ExpenseCategoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateExpenseCategory",
			Handler:    _ExpenseCategoryService_CreateExpenseCategory_Handler,
		},
		{
			MethodName: "GetExpenseCategoryByName",
			Handler:    _ExpenseCategoryService_GetExpenseCategoryByName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/expense_categories/service.proto",
}
