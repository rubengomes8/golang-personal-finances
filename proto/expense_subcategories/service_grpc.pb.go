// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/expense_subcategories/service.proto

package expense_subcategories

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExpenseSubCategoryServiceClient is the client API for ExpenseSubCategoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExpenseSubCategoryServiceClient interface {
	CreateExpenseCategory(ctx context.Context, in *ExpenseSubCategoryCreateRequest, opts ...grpc.CallOption) (*ExpenseSubCategoryCreateResponse, error)
	GetExpenseCategoryByName(ctx context.Context, in *ExpenseSubCategoryGetRequestByName, opts ...grpc.CallOption) (*ExpenseSubCategoryGetResponse, error)
}

type expenseSubCategoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExpenseSubCategoryServiceClient(cc grpc.ClientConnInterface) ExpenseSubCategoryServiceClient {
	return &expenseSubCategoryServiceClient{cc}
}

func (c *expenseSubCategoryServiceClient) CreateExpenseCategory(ctx context.Context, in *ExpenseSubCategoryCreateRequest, opts ...grpc.CallOption) (*ExpenseSubCategoryCreateResponse, error) {
	out := new(ExpenseSubCategoryCreateResponse)
	err := c.cc.Invoke(ctx, "/expense_subcategories.ExpenseSubCategoryService/CreateExpenseCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expenseSubCategoryServiceClient) GetExpenseCategoryByName(ctx context.Context, in *ExpenseSubCategoryGetRequestByName, opts ...grpc.CallOption) (*ExpenseSubCategoryGetResponse, error) {
	out := new(ExpenseSubCategoryGetResponse)
	err := c.cc.Invoke(ctx, "/expense_subcategories.ExpenseSubCategoryService/GetExpenseCategoryByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExpenseSubCategoryServiceServer is the server API for ExpenseSubCategoryService service.
// All implementations must embed UnimplementedExpenseSubCategoryServiceServer
// for forward compatibility
type ExpenseSubCategoryServiceServer interface {
	CreateExpenseCategory(context.Context, *ExpenseSubCategoryCreateRequest) (*ExpenseSubCategoryCreateResponse, error)
	GetExpenseCategoryByName(context.Context, *ExpenseSubCategoryGetRequestByName) (*ExpenseSubCategoryGetResponse, error)
	mustEmbedUnimplementedExpenseSubCategoryServiceServer()
}

// UnimplementedExpenseSubCategoryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExpenseSubCategoryServiceServer struct {
}

func (UnimplementedExpenseSubCategoryServiceServer) CreateExpenseCategory(context.Context, *ExpenseSubCategoryCreateRequest) (*ExpenseSubCategoryCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExpenseCategory not implemented")
}
func (UnimplementedExpenseSubCategoryServiceServer) GetExpenseCategoryByName(context.Context, *ExpenseSubCategoryGetRequestByName) (*ExpenseSubCategoryGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExpenseCategoryByName not implemented")
}
func (UnimplementedExpenseSubCategoryServiceServer) mustEmbedUnimplementedExpenseSubCategoryServiceServer() {
}

// UnsafeExpenseSubCategoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExpenseSubCategoryServiceServer will
// result in compilation errors.
type UnsafeExpenseSubCategoryServiceServer interface {
	mustEmbedUnimplementedExpenseSubCategoryServiceServer()
}

func RegisterExpenseSubCategoryServiceServer(s grpc.ServiceRegistrar, srv ExpenseSubCategoryServiceServer) {
	s.RegisterService(&ExpenseSubCategoryService_ServiceDesc, srv)
}

func _ExpenseSubCategoryService_CreateExpenseCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpenseSubCategoryCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpenseSubCategoryServiceServer).CreateExpenseCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/expense_subcategories.ExpenseSubCategoryService/CreateExpenseCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpenseSubCategoryServiceServer).CreateExpenseCategory(ctx, req.(*ExpenseSubCategoryCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExpenseSubCategoryService_GetExpenseCategoryByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpenseSubCategoryGetRequestByName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpenseSubCategoryServiceServer).GetExpenseCategoryByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/expense_subcategories.ExpenseSubCategoryService/GetExpenseCategoryByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpenseSubCategoryServiceServer).GetExpenseCategoryByName(ctx, req.(*ExpenseSubCategoryGetRequestByName))
	}
	return interceptor(ctx, in, info, handler)
}

// ExpenseSubCategoryService_ServiceDesc is the grpc.ServiceDesc for ExpenseSubCategoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExpenseSubCategoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "expense_subcategories.ExpenseSubCategoryService",
	HandlerType: (*ExpenseSubCategoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateExpenseCategory",
			Handler:    _ExpenseSubCategoryService_CreateExpenseCategory_Handler,
		},
		{
			MethodName: "GetExpenseCategoryByName",
			Handler:    _ExpenseSubCategoryService_GetExpenseCategoryByName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/expense_subcategories/service.proto",
}
